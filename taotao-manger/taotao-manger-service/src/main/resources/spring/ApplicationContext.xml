<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-2.5.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
http://www.springframework.org/schema/cache  
http://www.springframework.org/schema/cache/spring-cache.xsd 
http://www.springframework.org/schema/util  
http://www.springframework.org/schema/util/spring-util.xsd ">


	<aop:aspectj-autoproxy />
	<context:component-scan base-package="com.tt.app.service" />
	<!-- jdbc.properties文件路径 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
        destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="maxActive" value="10" />
        <property name="minIdle" value="5" />
    </bean>
	<!--====JDBC事务管理== -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 可通过注解控制事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="load*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="validate*" read-only="true" />

			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />

			<tx:method name="*" propagation="SUPPORTS" rollback-for="BusinessException" />
		</tx:attributes>
	</tx:advice>

	<aop:config proxy-target-class="true">
		<aop:pointcut id="aspectMethods"
			expression="execution(* com.tt.app.controller.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="aspectMethods" />
	</aop:config>

	<!-- 创建SqlSessionFactory，同时指定数据源 MyBatis sqlSessionFactory 配置 mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations">
			<list>
				<value>classpath*:com/tt/app/mapper/**/*Mapper.xml</value>
				<value>classpath*:com/tt/app/mapper/ext/**/*Mapper.xml</value>
			</list>
		</property>

	</bean>

	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tt.app.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
		<property name="markerInterface" value="com.tt.common.core.GenericMapper" />
	</bean>



	<bean id="LogAspectAdvice" class="com.tt.app.interceptor.LogAspect" />
	<aop:config proxy-target-class="true">
		<!-- 定义切面 -->
		<aop:pointcut id="interceptorPointCuts"
			expression="execution(* com.tt.app.service.*Service.*(..)) or execution(* com.tt.common.core.*Service.*(..)) " />
		<!-- 日志处理 -->
		<aop:advisor advice-ref="LogAspectAdvice" pointcut-ref="interceptorPointCuts" />
		<!-- 将事务通知和切面组合 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
	</aop:config>


</beans>